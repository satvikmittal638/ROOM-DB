package com.example.roomdb;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Toast;

import com.example.roomdb.ROOM_Components.EntityNotes;
import com.example.roomdb.ROOM_Components.ViewModel;

public class MainActivity extends AppCompatActivity {
private RecyclerView recyclerView;
private Adapter adapter;
private ViewModel notesViewModel;

public static int ADD_NOTES_REQUEST_CODE=1;
public static final int UPDATE_NOTES_REQUEST_CODE=2;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        recyclerView=findViewById(R.id.recyclerView);

        recyclerView.setHasFixedSize(false);
        recyclerView.setLayoutManager(new GridLayoutManager(this,2));//spancount is the number of columns
        adapter=new Adapter(this);
        recyclerView.setAdapter(adapter);

        /*
         When your Activity first starts,
         the ViewModelProviders will create the ViewModel.
         When the activity is destroyed, for example through a configuration change,
         the ViewModel persists. When the activity is re-created,
         the ViewModelProviders return the existing ViewModel
         */
//        notesViewModel= new ViewModelProvider(this).get(ViewModel.class);-> this can't create a instance of viewModel
        notesViewModel = new ViewModelProvider(this, new ViewModelProvider.AndroidViewModelFactory(getApplication())).get(ViewModel.class);
        //Everytime a change os observed,a arrayList is generated by the name of notes and is passed to the updateList method of the Adapter
        notesViewModel.getNotes().observe(this,notes->adapter.setNotesList(notes));


    }

    public void addNewNotes(View view) {
        Intent intent=new Intent(this,AddNotes.class);
        startActivityForResult(intent,ADD_NOTES_REQUEST_CODE);//starts the activity in hope of a result

    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if( resultCode==RESULT_OK && (requestCode==ADD_NOTES_REQUEST_CODE || requestCode == UPDATE_NOTES_REQUEST_CODE) )
        {
            EntityNotes notes=new EntityNotes(data.getStringExtra(AddNotes.INTENT_NAME));//id is auto-generated
            if(requestCode == ADD_NOTES_REQUEST_CODE)
                notesViewModel.insert(notes);

            if(requestCode == UPDATE_NOTES_REQUEST_CODE) {
                notesViewModel.updateNotes(notes);
                Toast.makeText(this, "Updated", Toast.LENGTH_SHORT).show();
            }

//            Toast.makeText(this, "Saved Successfully "+notes.getNotes(), Toast.LENGTH_SHORT).show();
        }
        else
            Toast.makeText(this, "Can't save !", Toast.LENGTH_SHORT).show();
    }
}